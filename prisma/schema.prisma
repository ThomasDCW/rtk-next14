datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
model Product {
  id                 Int      @id @default(autoincrement())
  title              String
  description        String
  price              Float
  discountPercentage Float
  rating             Float
  stock              Int
  brand              String
  category           String
  thumbnail          String
  image              String
}

model Part {
  id                    String   @id @default(cuid())
  code                  String
  label                 String
  quality               String
  year                  Int
  CNIT                  String
  description           String
  OERef                 String
  comments              String?
  engineType            String?
  engineCode            String?
  boxType               String?
  boxCode               String?
  autoManu              String?
  storage               String
  dismantled            Boolean
  barcode               String
  images                String[]
  exVatPrice            Float
  exVatShippingCost     Float
  shippingCostCategory  Int
  brand                 String
  model                 String
  phase                 String
  version               String
  energy                String
  power                 Int
  DINPower              Int
  mileage               Int
  color                 String
  policeNb              String
  doors                 Int
  engineSize            Int
  firstRegistrationDate DateTime
  registration          String
  identifier            String
  AMRef                 String?
  lueRef                String?
  PRECode               String?
  manufacturerPrice     Float
  weight                Float
  family                String
  subFamily             String
  partType              String
  VIN                   String?
  Ktype                 String?
  publishable           Boolean
  status                String
  updatedRef            String?
  excluded              Boolean
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stripeCustomerId String?
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}